1. With a google test EXPECT_THROW. It also checks that the correct exception is thrown and the correct error message
is printed.

2. To be more generic, let the caller deside the stream type. Also for writing tests, so we can use stringstreams etc.

3. Both but used line by line, an advantage is that you can save multiple newlines. If you regex the entire file it
will most likely be faster but the inputs are small and few.

4. You can do it with,

std::string content((std::istreambuf_iterator<char>(input)), std::istreambuf_iterator<char>());

The string constructor takes two iterators, one from the beginning and one from the end. The second argument is a empty
iterator which is anagolous to a "end" iterator, which means the first iterator will go until the end while constructing
the string.

5. You can put the regular expressions into classes, so if something matches any of those patterns they should be
replaced. However, since you need to know which pattern matched to replace the character, you still need to check
all the possible tags.

6. Check the return value of .fail() on the stream.

7. Check the return value of .eof() on the stream.

8. To throw an exception, use a stream and check if the stream operation failed i.e. .eof() or .fail() and then throw
the appropriate exception. If you want to handle non-numeric characters, you could use a regex expression to replace
all non-numeric characters with nothing.

9. It needs the type of the allocated value, to know the size of memory to allocate. toString needs to know what type
comes in since the type out is always string, and string_cast needs to know the final type but the original type is 
always string.
